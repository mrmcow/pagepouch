(()=>{"use strict";const e="undefined"!=typeof browser?browser:chrome,t="https://pagestash.app";class o{static async signIn(o,r){console.log("üîê ExtensionAuth.signIn called for:",o);try{const a=await fetch(`${t}/api/auth/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:o,password:r})}),s=await a.json();return a.ok?(console.log("üîê Login successful:",{hasSession:!!s.session,hasUser:!!s.user}),s.session&&(console.log("üîê Storing session in extension storage"),await e.storage.local.set({authToken:s.session.access_token,refreshToken:s.session.refresh_token,userEmail:s.user?.email,userId:s.user?.id})),{data:{session:s.session,user:s.user},error:null}):(console.error("üîê Login error:",s.error),{data:null,error:{message:s.error}})}catch(e){return console.error("üîê Login request failed:",e),{data:null,error:{message:e.message||"Network error"}}}}static async signUp(o,r,a){try{const s=await fetch(`${t}/api/auth/signup`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:o,password:r,fullName:a})}),i=await s.json();return s.ok?(i.session&&await e.storage.local.set({authToken:i.session.access_token,refreshToken:i.session.refresh_token,userEmail:i.user?.email,userId:i.user?.id}),{data:{session:i.session,user:i.user},error:null}):(console.error("üîê Signup error:",i.error),{data:null,error:{message:i.error}})}catch(e){return console.error("üîê Signup request failed:",e),{data:null,error:{message:e.message||"Network error"}}}}static async signOut(){return await e.storage.local.remove(["authToken","refreshToken","userEmail","userId"]),console.log("üîê Signed out and cleared local storage"),{error:null}}static async restoreSession(){try{const t=await new Promise(t=>{e.storage.local.get(["authToken","refreshToken","userId","userEmail"],e=>{t({authToken:e.authToken||null,refreshToken:e.refreshToken||null,userId:e.userId||null,userEmail:e.userEmail||null})})});return t.authToken?(console.log("üîê Session found for user:",t.userEmail),!0):(console.log("üîê No stored session found"),!1)}catch(e){return console.error("üîê Session restoration error:",e),await this.signOut(),!1}}static async getSession(){return new Promise(t=>{e.storage.local.get(["authToken","userId"],e=>{t({token:e.authToken||null,userId:e.userId||null})})})}static async refreshSession(){return console.log("üîê Token refresh not implemented - user will need to sign in again if token expires"),{data:null,error:new Error("Token refresh not implemented")}}}class r{static getApiBaseUrl(){return t}static async authenticatedFetch(e,t={}){await o.restoreSession();const{token:r}=await o.getSession();if(!r)throw new Error("Not authenticated");let a=await fetch(e,{...t,headers:{...t.headers,Authorization:`Bearer ${r}`}});if(401===a.status){console.log("Token expired, refreshing and retrying..."),await o.refreshSession();const{token:r}=await o.getSession();if(!r)throw new Error("Authentication failed after refresh");a=await fetch(e,{...t,headers:{...t.headers,Authorization:`Bearer ${r}`}})}return a}static async saveClip(e){const t=`${this.getApiBaseUrl()}/api/clips`;console.log("Saving clip to API endpoint:",t);const o=await this.authenticatedFetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(console.log("API response status:",o.status),!o.ok){const e=await o.text();let t;console.error("API error response:",e);try{t=JSON.parse(e)}catch{t={error:e||"Failed to save clip"}}throw new Error(t.error||"Failed to save clip")}const r=await o.json();return console.log("Clip saved successfully:",r),r}static async getClips(e){const t=new URLSearchParams;e?.limit&&t.set("limit",e.limit.toString()),e?.offset&&t.set("offset",e.offset.toString()),e?.folder_id&&t.set("folder_id",e.folder_id),e?.q&&t.set("q",e.q);const o=await this.authenticatedFetch(`${this.getApiBaseUrl()}/api/clips?${t}`);if(!o.ok){const e=await o.json();throw new Error(e.error||"Failed to fetch clips")}return o.json()}static async getFolders(){const e=await this.authenticatedFetch(`${this.getApiBaseUrl()}/api/folders`);if(!e.ok){const t=await e.json();throw new Error(t.error||"Failed to fetch folders")}return e.json()}static async getUsage(){const e=await this.authenticatedFetch(`${this.getApiBaseUrl()}/api/usage`);if(!e.ok){const t=await e.json();throw new Error(t.error||"Failed to fetch usage data")}return e.json()}static async createFolder(e){const t=await this.authenticatedFetch(`${this.getApiBaseUrl()}/api/folders`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok){const e=await t.json();throw new Error(e.error||"Failed to create folder")}return(await t.json()).folder}}const a="undefined"!=typeof browser?browser:chrome;class s{static async captureFullPage(e,t={}){const o={...this.DEFAULT_OPTIONS,...t},r=Date.now();try{if(!this.isSupported())throw new Error("Full page capture is not supported - missing Chrome APIs or permissions");const t=await this.getPageInfo(e);if(console.log("Full page capture - Page info:",{scrollHeight:t.scrollHeight,scrollWidth:t.scrollWidth,viewportWidth:t.viewportWidth,viewportHeight:t.viewportHeight,originalScrollX:t.originalScrollX,originalScrollY:t.originalScrollY}),t.scrollHeight<=t.viewportHeight)return console.log("Page fits in viewport, using simple capture"),this.captureVisibleArea(e,o,t,r);if("undefined"!=typeof browser)return console.log("üîß Firefox: Using SIMPLE vertical sections - same as visible area"),this.captureVerticalOnlyFirefox(e,o,t,r);console.log("üîß Chrome: Using full grid capture");const a=t.scrollWidth>t.viewportWidth,s=t.scrollWidth>=1.1*t.viewportWidth,i=a||s;console.log("üîß Horizontal scroll analysis:",{scrollWidth:t.scrollWidth,viewportWidth:t.viewportWidth,ratio:t.scrollWidth/t.viewportWidth,needsHorizontalScroll:a,forceHorizontalScroll:s,finalNeedsHorizontalScroll:i});const n=this.calculateScrollPositions(t.scrollHeight,t.viewportHeight,o.maxHeight),l=i?this.calculateHorizontalScrollPositions(t.scrollWidth,t.viewportWidth):[0],c=[],g=n.length*l.length;console.log("üîß Firefox capture grid analysis:",{verticalPositions:n.length,horizontalPositions:l.length,totalSections:g,verticalPositionsArray:n,horizontalPositionsArray:l}),console.log(`Capturing ${g} sections (${l.length}x${n.length} grid)...`);for(let t=0;t<n.length;t++)for(let r=0;r<l.length;r++){const a=n[t],s=l[r],i=t*l.length+r+1;console.log(`Capturing section ${i}/${g} at position (${s}, ${a})`),await this.scrollToPosition(e,a,s),await this.delay(o.scrollDelay),i>1&&(console.log("Waiting for Chrome rate limit..."),await this.delay(800));try{const e=await this.captureWithRetry(o.format,o.quality,5);c.push({dataUrl:e,x:s,y:a}),console.log(`Section ${i} captured successfully`),i<g&&await this.delay(200)}catch(e){throw console.error(`Failed to capture section ${i}:`,e),new Error(`Failed to capture section ${i}: ${e instanceof Error?e.message:"Unknown error"}`)}}await this.scrollToPosition(e,t.originalScrollY,t.originalScrollX),console.log("Starting image stitching...");const d=Math.max(t.viewportWidth,t.scrollWidth),u=Math.min(t.scrollHeight,o.maxHeight);console.log("Stitching parameters:",{screenshotCount:c.length,actualWidth:d,actualHeight:u,viewportWidth:t.viewportWidth,viewportHeight:t.viewportHeight,screenshotPositions:c.map(e=>({x:e.x,y:e.y}))});const h=await this.stitchGridScreenshots(c,d,u,t.viewportWidth,t.viewportHeight);console.log("Image stitching completed"),console.log("Compressing image for API upload...");let p=.4;c.length>15?(p=.15,console.log("üîß Chrome: Extremely long page detected - using ultra compression (15%)")):c.length>10?(p=.2,console.log("üîß Chrome: Very long page detected - using aggressive compression (20%)")):c.length>6?(p=.3,console.log("üîß Chrome: Long page detected - using aggressive compression (30%)")):c.length>3?(p=.35,console.log("üîß Chrome: Medium page detected - using medium compression (35%)")):console.log("üîß Chrome: Short page - using standard compression (40%)");const f=await this.compressImage(h,p),m=.75*f.length/1048576;console.log("üîß Chrome: Final image size estimate:",Math.round(100*m)/100,"MB");let w=f;if(m>1.5){let e=.1;m>3?(e=.08,console.log("üîß Chrome: Image extremely large - applying extreme emergency compression (8%)")):m>2?(e=.09,console.log("üîß Chrome: Image very large - applying ultra emergency compression (9%)")):console.log("üîß Chrome: Image too large - applying emergency compression (10%)"),w=await this.compressImage(h,e);const t=.75*w.length/1048576;if(console.log("üîß Chrome: Emergency compressed size:",Math.round(100*t)/100,"MB"),t>1.2){console.log("üîß Chrome: Still too large - applying absolute minimum compression (5%)"),w=await this.compressImage(h,.05);const e=.75*w.length/1048576;console.log("üîß Chrome: Final absolute minimum size:",Math.round(100*e)/100,"MB")}}return console.log("Image compression completed"),{dataUrl:w,width:d,height:Math.min(t.scrollHeight,o.maxHeight),scrollHeight:t.scrollHeight,captureTime:Date.now()-r}}catch(e){throw console.error("Full page capture failed:",e),new Error(`Full page capture failed: ${e instanceof Error?e.message:"Unknown error"}`)}}static async captureVerticalOnlyFirefox(e,t,o,r){console.log("üîß Firefox: SIMPLE vertical sections - same as visible area capture"),console.log("üîß Firefox: Page dimensions:",{scrollWidth:o.scrollWidth,viewportWidth:o.viewportWidth,scrollHeight:o.scrollHeight,viewportHeight:o.viewportHeight});const s=this.calculateScrollPositions(o.scrollHeight,o.viewportHeight,t.maxHeight);console.log("üîß Firefox: SIMPLE capture plan:",{verticalSections:s.length,captureWidth:o.viewportWidth,totalHeight:o.scrollHeight,positions:s});const i=[];for(let o=0;o<s.length;o++){const r=s[o];console.log(`üîß Firefox: SIMPLE capture section ${o+1}/${s.length} at Y=${r}`),await this.scrollToPosition(e,r,0),await this.delay(t.scrollDelay),o>0&&await this.delay(600);try{const e=await a.tabs.captureVisibleTab({format:t.format,quality:t.quality});i.push(e),console.log(`üîß Firefox: SIMPLE section ${o+1} captured successfully`)}catch(e){throw console.error(`üîß Firefox: SIMPLE capture failed section ${o+1}:`,e),new Error(`Failed to capture section ${o+1}: ${e instanceof Error?e.message:"Unknown error"}`)}}await this.scrollToPosition(e,o.originalScrollY,o.originalScrollX),console.log("üîß Firefox: SIMPLE vertical stitching",i.length,"screenshots");const n=await this.stitchFirefoxVertical(i,o.viewportWidth,o.viewportHeight);let l=.4;i.length>15?(l=.15,console.log("üîß Firefox: Extremely long page detected - using ultra compression (15%)")):i.length>10?(l=.2,console.log("üîß Firefox: Very long page detected - using aggressive compression (20%)")):i.length>6?(l=.3,console.log("üîß Firefox: Long page detected - using aggressive compression (30%)")):i.length>3?(l=.35,console.log("üîß Firefox: Medium page detected - using medium compression (35%)")):console.log("üîß Firefox: Short page - using standard compression (40%)");const c=await this.compressImage(n,l),g=.75*c.length/1048576;console.log("üîß Firefox: Final image size estimate:",Math.round(100*g)/100,"MB");let d=c;if(g>1.5){let e=.1;g>3?(e=.08,console.log("üîß Firefox: Image extremely large - applying extreme emergency compression (8%)")):g>2?(e=.09,console.log("üîß Firefox: Image very large - applying ultra emergency compression (9%)")):console.log("üîß Firefox: Image too large - applying emergency compression (10%)"),d=await this.compressImage(n,e);const t=.75*d.length/1048576;if(console.log("üîß Firefox: Emergency compressed size:",Math.round(100*t)/100,"MB"),t>1.2){console.log("üîß Firefox: Still too large - applying absolute minimum compression (5%)"),d=await this.compressImage(n,.05);const e=.75*d.length/1048576;console.log("üîß Firefox: Final absolute minimum size:",Math.round(100*e)/100,"MB")}}return{dataUrl:d,width:o.viewportWidth,height:o.scrollHeight,scrollHeight:o.scrollHeight,captureTime:Date.now()-r}}static async stitchFirefoxGrid(e,t,o,r,a,s,i){try{console.log("üîß Firefox: BULLETPROOF grid stitching"),console.log("üîß Firefox: Grid dimensions:",{totalWidth:t,totalHeight:o,viewportWidth:r,viewportHeight:a,verticalSections:s,horizontalSections:i,totalScreenshots:e.length});const n=new OffscreenCanvas(t,o),l=n.getContext("2d");if(!l)throw new Error("Failed to get OffscreenCanvas context");const c=Math.floor(.1*a),g=Math.floor(.1*r);console.log("üîß Firefox: Grid overlaps:",{verticalOverlap:c,horizontalOverlap:g}),e.sort((e,t)=>e.y!==t.y?e.y-t.y:e.x-t.x);for(let t=0;t<s;t++)for(let o=0;o<i;o++){const s=t*i+o;if(s>=e.length){console.warn(`üîß Firefox: Missing screenshot at V${t+1}H${o+1}`);continue}const n=e[s];console.log(`üîß Firefox: Processing V${t+1}H${o+1} at (${n.x}, ${n.y})`);const d=await fetch(n.dataUrl),u=await d.blob(),h=await createImageBitmap(u),p=0===o?0:(r-g)*o,f=0===t?0:(a-c)*t,m=o>0?g:0,w=t>0?c:0,y=o>0?r-g:r,S=t>0?a-c:a;console.log(`üîß Firefox: V${t+1}H${o+1} -> Canvas(${p}, ${f}) from Source(${m}, ${w}, ${y}x${S})`),l.drawImage(h,m,w,y,S,p,f,y,S),h.close()}console.log("üîß Firefox: BULLETPROOF grid stitching completed");const d=await n.convertToBlob({type:"image/png"});return new Promise((e,t)=>{const o=new FileReader;o.onload=()=>e(o.result),o.onerror=()=>t(new Error("Failed to convert blob to data URL")),o.readAsDataURL(d)})}catch(t){return console.error("üîß Firefox: BULLETPROOF grid stitching failed:",t),e[0]?.dataUrl||""}}static async stitchFirefoxVertical(e,t,o){try{if(console.log("üîß Firefox: DEAD SIMPLE vertical stacking - NO width manipulation"),0===e.length)throw new Error("No screenshots to stitch");if(1===e.length)return console.log("üîß Firefox: Single screenshot, returning as-is"),e[0];const r=await fetch(e[0]),a=await r.blob(),s=await createImageBitmap(a),i=s.naturalWidth||s.width,n=s.naturalHeight||s.height;console.log("üîß Firefox: Actual screenshot dimensions:",{actualWidth:i,actualHeight:n,providedWidth:t,providedHeight:o,screenshots:e.length});const l=Math.floor(.1*n),c=n-l,g=n+c*(e.length-1);console.log("üîß Firefox: SIMPLE stacking plan:",{actualWidth:i,totalHeight:g,overlapPixels:l,sectionHeight:c,sections:e.length});const d=new OffscreenCanvas(i,g),u=d.getContext("2d");if(!u)throw new Error("Failed to get OffscreenCanvas context");let h=0;for(let t=0;t<e.length;t++){const o=e[t],r=await fetch(o),a=await r.blob(),s=await createImageBitmap(a);if(console.log(`üîß Firefox: SIMPLE stacking section ${t+1} at Y=${h}`),0===t)u.drawImage(s,0,0),h=n;else{const e=h-l;u.drawImage(s,0,l,s.width,s.height-l,0,e,s.width,s.height-l),h+=s.height-l}s.close()}s.close(),console.log("üîß Firefox: SIMPLE stacking completed - final size:",i,"x",g);const p=await d.convertToBlob({type:"image/png"});return new Promise((e,t)=>{const o=new FileReader;o.onload=()=>e(o.result),o.onerror=()=>t(new Error("Failed to convert blob to data URL")),o.readAsDataURL(p)})}catch(t){return console.error("üîß Firefox: SIMPLE stacking failed:",t),e[0]||""}}static async getPageInfo(e){const t=await this.executeScript(e,()=>{const e=document.body.scrollWidth||0,t=document.body.offsetWidth||0,o=document.documentElement.scrollWidth||0,r=document.documentElement.offsetWidth||0,a=document.documentElement.clientWidth||0,s=[e,t,o,r,a,window.innerWidth,window.outerWidth,screen.width];let i=0;try{const e=document.querySelectorAll("*");for(let t=0;t<Math.min(e.length,100);t++){const o=e[t].getBoundingClientRect().right+window.scrollX;o>i&&(i=o)}}catch(e){console.warn("Could not check element widths:",e)}s.push(i);const n=Math.max(...s),l=n>window.innerWidth?n:Math.max(n,1.2*window.innerWidth);return console.log("üîß Firefox page dimensions debug:",{bodyScrollWidth:e,bodyOffsetWidth:t,docScrollWidth:o,docOffsetWidth:r,docClientWidth:a,windowInnerWidth:window.innerWidth,windowOuterWidth:window.outerWidth,screenWidth:screen.width,maxElementWidth:i,calculatedContentWidth:n,finalWidth:l,allMeasurements:s}),{scrollHeight:Math.max(document.body.scrollHeight,document.body.offsetHeight,document.documentElement.clientHeight,document.documentElement.scrollHeight,document.documentElement.offsetHeight),scrollWidth:l,viewportWidth:window.innerWidth,viewportHeight:window.innerHeight,originalScrollY:window.scrollY,originalScrollX:window.scrollX}});if(!t||!t[0])throw new Error("Failed to get page information");return t[0]}static calculateScrollPositions(e,t,o){const r=[],a=Math.min(e,o);console.log("üîß Calculating vertical positions:",{scrollHeight:e,viewportHeight:t,effectiveHeight:a});const s=t-Math.floor(.1*t);let i=0;for(;i<a&&(r.push(i),i+=s,!(i>=a-t)););const n=Math.max(0,a-t);return!r.includes(n)&&n>0&&r.push(n),console.log("üîß Vertical positions calculated:",r),r}static calculateHorizontalScrollPositions(e,t){const o=[];if(console.log("üîß Calculating horizontal positions:",{scrollWidth:e,viewportWidth:t}),o.push(0),e>t){const r=t-Math.floor(.1*t);let a=0;for(;a+t<e;)a+=r,a>0&&!o.includes(a)&&o.push(a)}return console.log("üîß Horizontal positions calculated:",o),o}static async scrollToPosition(e,t,o=0){await this.executeScript(e,(e,t)=>{window.scrollTo(e,t)},[o,t])}static async captureVisibleArea(e,t,o,r){return{dataUrl:await a.tabs.captureVisibleTab({format:t.format,quality:t.quality}),width:o.viewportWidth,height:o.viewportHeight,scrollHeight:o.scrollHeight,captureTime:Date.now()-r}}static async stitchScreenshots(e,t,o,r){try{const a=r[r.length-1]+o,s=new OffscreenCanvas(t,a),i=s.getContext("2d");if(!i)throw new Error("Failed to get OffscreenCanvas context");for(let t=0;t<e.length;t++){const a=e[t],s=r[t],n=await fetch(a),l=await n.blob(),c=await createImageBitmap(l);if(0===t)i.drawImage(c,0,s);else{const e=r[t-1]+o-s;e>0?i.drawImage(c,0,e,c.width,c.height-e,0,s+e,c.width,c.height-e):i.drawImage(c,0,s)}c.close()}const n=await s.convertToBlob({type:"image/png"});return new Promise((e,t)=>{const o=new FileReader;o.onload=()=>e(o.result),o.onerror=()=>t(new Error("Failed to convert blob to data URL")),o.readAsDataURL(n)})}catch(t){return console.error("Stitching failed:",t),e[0]||""}}static async stitchGridScreenshots(e,t,o,r,a){try{console.log("Stitching grid screenshots:",{totalScreenshots:e.length,totalWidth:t,totalHeight:o,viewportWidth:r,viewportHeight:a});const s=new OffscreenCanvas(t,o),i=s.getContext("2d");if(!i)throw new Error("Failed to get OffscreenCanvas context");e.sort((e,t)=>e.y!==t.y?e.y-t.y:e.x-t.x);const n=Math.floor(.1*a),l=Math.floor(.1*r);console.log("üîß Stitching with standard overlaps:",{verticalOverlap:n,horizontalOverlap:l,viewportWidth:r,viewportHeight:a});const c=new Map;e.forEach(e=>{c.has(e.y)||c.set(e.y,[]),c.get(e.y).push(e)});let g=0;const d=Array.from(c.keys()).sort((e,t)=>e-t);for(let e=0;e<d.length;e++){const t=d[e],o=c.get(t);o.sort((e,t)=>e.x-t.x);let r=0;for(let t=0;t<o.length;t++){const a=o[t],s=await fetch(a.dataUrl),c=await s.blob(),d=await createImageBitmap(c);let u=0,h=0,p=d.width,f=d.height,m=p,w=f;t>0&&(u=l,p-=l,m=p),e>0&&(h=n,f-=n,w=f),i.drawImage(d,u,h,p,f,r,g,m,w),r+=m,d.close()}if(o.length>0){const t=o[0],r=await fetch(t.dataUrl),a=await r.blob(),s=await createImageBitmap(a);g+=e>0?s.height-n:s.height,s.close()}}const u=await s.convertToBlob({type:"image/png"});return new Promise((e,t)=>{const o=new FileReader;o.onload=()=>e(o.result),o.onerror=()=>t(new Error("Failed to convert blob to data URL")),o.readAsDataURL(u)})}catch(t){return console.error("Grid stitching failed:",t),e[0]?.dataUrl||""}}static async captureWithRetry(e,t,o){for(let r=1;r<=o;r++)try{if(!a.tabs||"function"!=typeof a.tabs.captureVisibleTab)throw new Error("Chrome tabs API not available");return await a.tabs.captureVisibleTab({format:e,quality:t})}catch(e){const t=e instanceof Error?e.message:String(e);if(console.log(`Capture attempt ${r}/${o} failed:`,t),t.includes("MAX_CAPTURE_VISIBLE_TAB_CALLS_PER_SECOND")&&(console.log(`Rate limit hit on attempt ${r}/${o}, waiting...`),r<o)){const e=1e3*Math.pow(2,r);await this.delay(e);continue}if((t.includes("permission")||t.includes("activeTab")||t.includes("all_urls"))&&(console.log(`Permission error on attempt ${r}/${o}, waiting longer...`),r<o)){const e=1500*Math.pow(2,r);await this.delay(e);continue}if(r<o){console.log("Generic error, waiting before retry..."),await this.delay(1e3*r);continue}throw e}throw new Error("Max retries exceeded for capture")}static delay(e){return new Promise(t=>setTimeout(t,e))}static async executeScript(e,t,o){if(a?.scripting&&"function"==typeof a.scripting.executeScript)return console.log("üîß Using scripting.executeScript (Chrome)"),(await a.scripting.executeScript({target:{tabId:e},func:t,args:o})).map(e=>e.result);if(a?.tabs&&"function"==typeof a.tabs.executeScript)return console.log("üîß Using tabs.executeScript (Firefox)"),new Promise((r,s)=>{const i=o?`(${t.toString()})(${o.map(e=>JSON.stringify(e)).join(", ")})`:`(${t.toString()})()`;a.tabs.executeScript(e,{code:i},e=>{a.runtime.lastError?s(new Error(a.runtime.lastError.message)):r(e||[])})});throw new Error("No script execution API available")}static async stitchFirefoxScreenshotsWithOverlap(e,t,o,r,a,s){try{console.log("üîß Firefox PRECISION stitching:",{screenshots:e.length,targetWidth:t,viewportHeight:o,totalHeight:r,scrollPositions:a,overlap:s});const i=new OffscreenCanvas(t,r),n=i.getContext("2d");if(!n)throw new Error("Failed to get canvas context");n.fillStyle="#ffffff",n.fillRect(0,0,t,r);for(let i=0;i<e.length;i++){const l=e[i],c=a[i];console.log(`üîß Firefox: Stitching section ${i+1} at scroll Y=${c}`);const g=await fetch(l),d=await g.blob(),u=await createImageBitmap(d);if(0===i)n.drawImage(u,0,0,t,o,0,0,t,o),console.log("üîß Firefox: Drew first section at Y=0");else{const e=a[i-1],l=Math.max(0,e+o-c),g=Math.min(l,s),d=o-g,h=c+g;if(d>0&&h<r){const e=Math.min(d,r-h);n.drawImage(u,0,g,t,e,0,h,t,e),console.log(`üîß Firefox: Drew section ${i+1} from sourceY=${g} to destY=${h}, height=${e}`)}}u.close()}console.log(`üîß Firefox: Stitching completed, canvas height: ${r}`);const l=await i.convertToBlob({type:"image/png"});return new Promise((e,t)=>{const o=new FileReader;o.onload=()=>e(o.result),o.onerror=t,o.readAsDataURL(l)})}catch(t){return console.error("üîß Firefox stitching failed:",t),e[0]||""}}static async compressImage(e,t=.7){try{const o=new Image;await new Promise((t,r)=>{o.onload=t,o.onerror=r,o.src=e});const r=new OffscreenCanvas(o.width,o.height),a=r.getContext("2d");if(!a)throw new Error("Failed to get canvas context for compression");a.drawImage(o,0,0);const s=await r.convertToBlob({type:"image/jpeg",quality:t});return new Promise((e,t)=>{const o=new FileReader;o.onload=()=>e(o.result),o.onerror=t,o.readAsDataURL(s)})}catch(t){return console.warn("Image compression failed, using original:",t),e}}static isSupported(){console.log("üîß Checking FullPageCapture support..."),console.log("üîß extensionAPI available:",!!a),console.log("üîß tabs API available:",!!a?.tabs),console.log("üîß captureVisibleTab available:","function"==typeof a?.tabs?.captureVisibleTab),console.log("üîß scripting API available:",!!a?.scripting),console.log("üîß executeScript available:","function"==typeof a?.scripting?.executeScript),console.log("üîß tabs.executeScript available:","function"==typeof a?.tabs?.executeScript);const e=!!(a?.scripting&&"function"==typeof a.scripting.executeScript||a?.tabs&&"function"==typeof a.tabs.executeScript),t=!!(a&&a.tabs&&"function"==typeof a.tabs.captureVisibleTab&&e);return console.log("üîß hasScriptExecution:",e),console.log("üîß FullPageCapture isSupported:",t),t}}s.DEFAULT_OPTIONS={quality:90,format:"png",maxHeight:32767,scrollDelay:1e3},console.log("PageStash background script loaded");const i="undefined"!=typeof browser?browser:chrome;console.log("üîß Background using extension API:","undefined"!=typeof browser?"browser":"chrome");let n=null;function l(){n&&clearInterval(n),n=setInterval(async()=>{try{const{token:e}=await o.getSession();e?console.log("üîê Session is active"):console.log("üîê No active session")}catch(e){console.error("Session monitor error:",e)}},3e5),console.log("üîê Session monitor started")}i.runtime.onInstalled.addListener(e=>{console.log("PageStash extension installed:",e.reason),"install"===e.reason&&i.storage.local.set({isFirstRun:!0,captureCount:0}),o.restoreSession().then(()=>{l()})}),i.runtime.onStartup&&i.runtime.onStartup.addListener(async()=>{console.log("üîê Extension startup - restoring session"),await o.restoreSession(),l()}),i.runtime.onSuspend&&i.runtime.onSuspend.addListener(()=>{console.log("üîê Stopping session monitor"),n&&clearInterval(n)});const c=i.action||i.browserAction;c&&c.onClicked?c.onClicked.addListener(async e=>{console.log("Extension clicked on tab:",e?.url)}):console.log("üîß Action API not available (popup will be used instead)");let g=null;async function d(e){return new Promise(t=>{i.storage.local.get(["localClips"],o=>{const r=o.localClips||[],a={...e,id:Date.now().toString(),created_at:(new Date).toISOString(),synced:!1};r.unshift(a),r.length>100&&r.splice(100),i.storage.local.set({localClips:r},()=>{console.log("Clip saved locally"),t()})})})}i.runtime.onMessage.addListener((e,t,a)=>{switch(console.log("üîß Background received message:",e),e.type){case"CAPTURE_PAGE":!async function(e){try{const[t]=await i.tabs.query({active:!0,currentWindow:!0});if(!t)return console.error("No active tab found"),void i.runtime.sendMessage({type:"CAPTURE_PROGRESS",payload:{status:"error",message:"No active tab found"}});console.log("Found active tab:",t.url),await async function(e,t){if(!t?.id)return console.error("No tab ID provided for capture"),void i.runtime.sendMessage({type:"CAPTURE_PROGRESS",payload:{status:"error",message:"No active tab found"}});g=new AbortController;const a=g.signal,n=e.captureType||"fullPage",l=setTimeout(()=>{g&&(g.abort(),i.runtime.sendMessage({type:"CAPTURE_PROGRESS",payload:{status:"error",message:"Capture timed out. Please try again."}}))},"fullPage"===n?6e4:1e4);try{if(console.log("Starting page capture:",{url:e.url,captureType:e.captureType,favicon:e.favicon,faviconValid:e.favicon&&e.favicon.startsWith("http")}),a.aborted)return void clearTimeout(l);i.runtime.sendMessage({type:"CAPTURE_PROGRESS",payload:{status:"extracting",message:"Extracting page content..."}});let c,u={};try{const o=await i.tabs.sendMessage(t.id,{type:"EXTRACT_PAGE_DATA"});o&&o.success?(u=o.data,console.log("Page content extracted:",{htmlLength:u.html?.length||0,textLength:u.text?.length||0,title:u.title})):(console.warn("Failed to extract page content from content script:",o),u={url:e.url,title:e.title,html:e.html||"",text:e.text||"",favicon:e.favicon})}catch(t){console.warn("Content script not available, using fallback data:",t),u={url:e.url,title:e.title,html:e.html||"",text:e.text||"",favicon:e.favicon}}if(a.aborted)return void clearTimeout(l);if("fullPage"===n&&s.isSupported()){console.log("Starting full-page capture for:",e.url),i.runtime.sendMessage({type:"CAPTURE_PROGRESS",payload:{status:"capturing",message:"Capturing full page..."}});const o=await s.captureFullPage(t.id,{quality:90,format:"png",scrollDelay:500});if(a.aborted)return void clearTimeout(l);c=o.dataUrl,console.log(`Full-page capture completed: ${o.width}x${o.height}px in ${o.captureTime}ms`)}else console.log("Capturing visible area for:",e.url),i.runtime.sendMessage({type:"CAPTURE_PROGRESS",payload:{status:"capturing",message:"Capturing visible area..."}}),c=await i.tabs.captureVisibleTab(t.windowId,{format:"png",quality:90});if(a.aborted)return void clearTimeout(l);console.log("Screenshot captured successfully"),i.runtime.sendMessage({type:"CAPTURE_PROGRESS",payload:{status:"saving",message:"Saving capture..."}});const h={url:u.url||e.url,title:u.title||e.title,screenshot_data:c,html_content:u.html||"",text_content:u.text||"",...(u.favicon||e.favicon)&&(u.favicon||e.favicon).startsWith("http")?{favicon_url:u.favicon||e.favicon}:{},...e.folderId?{folder_id:e.folderId}:{}};console.log("Prepared clip data:",{url:h.url,title:h.title,hasScreenshot:!!h.screenshot_data,htmlLength:h.html_content.length,textLength:h.text_content.length,hasFavicon:!!h.favicon_url});const{token:p}=await o.getSession();if(p)try{const e=await r.saveClip(h);if(console.log("Clip saved to Supabase successfully"),a.aborted)return void clearTimeout(l);i.runtime.sendMessage({type:"CAPTURE_PROGRESS",payload:{status:"complete",message:"Capture saved to cloud!",usage:e.usage}})}catch(e){if(console.error("Failed to save to Supabase:",e),a.aborted)return void clearTimeout(l);await d(h),i.runtime.sendMessage({type:"CAPTURE_PROGRESS",payload:{status:"complete",message:"Capture saved locally (will sync when online)"}})}else await d(h),i.runtime.sendMessage({type:"CAPTURE_PROGRESS",payload:{status:"complete",message:"Capture saved locally (sign in to sync)"}});i.storage.local.get(["captureCount"],e=>{const t=(e.captureCount||0)+1;i.storage.local.set({captureCount:t})}),clearTimeout(l),g=null}catch(e){if(console.error("Failed to capture page:",e),clearTimeout(l),g=null,a.aborted)return;i.runtime.sendMessage({type:"CAPTURE_PROGRESS",payload:{status:"error",message:e instanceof Error?e.message:"Capture failed"}})}}(e,t)}catch(e){console.error("Failed to get active tab:",e),i.runtime.sendMessage({type:"CAPTURE_PROGRESS",payload:{status:"error",message:"Failed to access active tab"}})}}(e.payload);break;case"CANCEL_CAPTURE":console.log("Cancelling current capture..."),g&&(g.abort(),g=null),i.runtime.sendMessage({type:"CAPTURE_PROGRESS",payload:{status:"cancelled",message:"Capture cancelled by user"}});break;case"GET_AUTH_TOKEN":return async function(e){try{await o.restoreSession();const{token:t}=await o.getSession();e({token:t})}catch(t){console.error("Failed to get auth token:",t),e({token:null})}}(a),!0;case"AUTHENTICATE":return async function(e,t){try{let r;console.log("üîß Background: Handling authentication:",e.isSignUp?"sign up":"sign in","for",e.email),e.isSignUp?(console.log("üîß Background: Calling ExtensionAuth.signUp"),r=await o.signUp(e.email,e.password)):(console.log("üîß Background: Calling ExtensionAuth.signIn"),r=await o.signIn(e.email,e.password)),console.log("üîß Background: Auth result:",{hasData:!!r.data,hasError:!!r.error,errorMessage:r.error?.message}),r.error?(console.error("üîß Background: Authentication failed:",r.error),t({error:r.error})):(console.log("üîß Background: Authentication successful, sending response"),t({data:r.data}))}catch(e){console.error("üîß Background: Authentication error:",e),t({error:{message:"Authentication failed. Please try again."}})}}(e.payload,a),!0;case"SIGN_OUT":return async function(e){try{console.log("Handling sign out"),await o.signOut(),e({success:!0})}catch(t){console.error("Sign out error:",t),await i.storage.local.remove(["authToken","userEmail","userId","refreshToken"]),e({success:!0})}}(a),!0;case"GET_FOLDERS":return async function(e){try{console.log("üîß Background: Getting user folders");const{token:t}=await o.getSession();console.log("üîß Background: Auth token available:",t?"YES":"NO");const a=await r.getFolders();console.log("üîß Background: Folders retrieved:",a),e(a)}catch(t){console.error("üîß Background: Failed to get folders:",t),e({folders:[]})}}(a),!0;case"GET_USAGE":return async function(e){try{console.log("üîß Background: Getting user usage data");const{token:t}=await o.getSession();console.log("üîß Background: Auth token available:",t?"YES":"NO");const a=await r.getUsage();console.log("üîß Background: Usage retrieved:",a),e(a)}catch(t){console.error("üîß Background: Failed to get usage:",t),e({error:"Failed to load usage data",clips_remaining:50,clips_limit:50,subscription_tier:"free",warning_level:"safe"})}}(a),!0;case"CREATE_FOLDER":return async function(e,t){try{console.log("üîß Background: Creating folder:",e);const{token:a}=await o.getSession();console.log("üîß Background: Auth token available:",a?"YES":"NO");const s=await r.createFolder(e);console.log("üîß Background: Folder created:",s),t({folder:s})}catch(e){console.error("üîß Background: Failed to create folder:",e),t({error:"Failed to create folder"})}}(e.payload,a),!0;default:console.warn("Unknown message type:",e.type)}}),i.storage.onChanged.addListener((e,t)=>{"local"===t&&e.authToken&&e.authToken.newValue&&async function(){try{const e=await new Promise(e=>{i.storage.local.get(["localClips"],t=>{e({localClips:t.localClips||[]})})}),t=e.localClips.filter(e=>!e.synced);if(0===t.length)return;console.log(`Syncing ${t.length} local clips...`);for(const e of t)try{await r.saveClip({url:e.url,title:e.title,screenshot_data:e.screenshot_data,html_content:e.html_content,text_content:e.text_content,favicon_url:e.favicon_url}),e.synced=!0}catch(e){console.error("Failed to sync clip:",e)}i.storage.local.set({localClips:e.localClips}),console.log("Local clips sync completed")}catch(e){console.error("Failed to sync local clips:",e)}}()})})();